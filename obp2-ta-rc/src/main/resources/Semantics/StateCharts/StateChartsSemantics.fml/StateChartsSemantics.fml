use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;
use org.openflexo.foundation.fml.ta.FMLModelSlot;
use org.openflexo.ta.obp2.OBP2ModelSlot;

/**
 * 
 * @author sylvain
 * @version 0.1
 */
@VirtualModel(uri="http://openflexo.org/obp2/Semantics/StateCharts/StateChartsSemantics.fml")
public class StateChartsSemantics extends CoreSemantics  {

  @GetSetProperty(value="stateCharts", access=get)  
  public List<StateChartExecutionUnitDefinition> getStateCharts {  
    return this.SelectFlexoConceptInstance(type=StateChartExecutionUnitDefinition);  
  }
  public StateCharts stateChartsView;

  @CreationScheme  
  StateChartsSemantics:init(String virtualModelName, StateCharts stateChartsView) {  
    supportVirtualModel = CreateTopLevelVirtualModel();    
    stateChartsView = parameters.stateChartsView;  
  }  

  @ActionScheme  
  public StateChartsExecutionModel makeInitialConfiguration(AbstractAnalysis analysis) {  
    log ("On arrive la analysis=" + parameters.analysis)    
    StateChartsExecutionModel returned = parameters.analysis.AddOBP2Analysis();    
    log "On vient de creer le StateChartsExecutionModel"    
    returned.semantics = this;    
    for (stateChartDefinition : stateCharts) {    
      StateChartExecutionUnit stateChartInstance = returned.AddFlexoConceptInstance();      
      log ("On vient de creer le StateChartInstance " + stateChartInstance)      
      stateChartInstance.definition = stateChartDefinition;      
      stateChartInstance.init()    
    }    
    return returned;  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  

  @ActionScheme  
  ArrayList<Object> makeInitialConfigurations(AbstractAnalysis analysis) {  
    ArrayList<Object> returned = new ArrayList<Object>();    
    returned.add(this.makeInitialConfiguration(parameters.analysis))    
    return returned;  
  }  

  @ActionScheme  
  public ArrayList<Transition> fireableTransitionsFrom(StateChartsExecutionModel configuration) {  
    ArrayList<Transition> returned = new ArrayList<Transition>();    
    for (startChartDefinition : stateCharts) {    
      StateChartExecutionUnit stateChartExecutionUnit = parameters.configuration.getStateChartExecutionUnit(startChartDefinition);      
      List<Transition> transitions = startChartDefinition.fireableTransitionsFrom(stateChartExecutionUnit);      
      log ((("Pour " + startChartDefinition) + " je retourne ") + transitions)      
      returned.addAll(transitions)    
    }    
    return returned;  
  }  

  @ActionScheme  
  Void fireOneTransition(StateChartsExecutionModel source, Transition transition) {  
    log ("On execute la transition " + parameters.transition)    
    StateChartExecutionUnit stateChartExecutionUnit = parameters.source.getStateChartExecutionUnitWithModel(parameters.transition.container);    
    stateChartExecutionUnit.performTransition(parameters.transition)  
  }  


  @FlexoConcept  
  public class StateChartExecutionUnitDefinition extends ExecutionUnitDefinition  {  
  
    public StateChartModel model;  
  
    @CreationScheme    
    StateChartExecutionUnitDefinition:create(String name, StateChartModel model) {    
      supportConcept = supportVirtualModel.CreateFlexoConcept();      
      model = parameters.model;    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    List<Transition> fireableTransitionsFrom(StateChartExecutionUnit executionUnit) {    
      return parameters.executionUnit.state.outgoingTransitions;    
    }    
  
  }  

}
